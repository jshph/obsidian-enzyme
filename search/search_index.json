{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u270f\ufe0f Getting Started","text":""},{"location":"#setting-up-prerequisite-plugins","title":"Setting up prerequisite plugins","text":"<p>Reason makes use of a few plugins:</p> <ul> <li>The excellent Dataview plugin in order to retrieve notes for synthesis. Dataview provides a live index with which to query the most up-to-date contents from your Obsidian notes. Make sure to install and enable this.</li> <li>It also works well when paired with the Readwise plugin, which can import highlights from books, articles, and podcasts into Obsidian. More on the author's workflow with these two plugins in a blog post.</li> <li>Ensure that the Canvas plugin is enabled.</li> </ul>"},{"location":"#designed-as-a-notebook","title":"Designed as a notebook","text":"<p>Reason is designed to be a notebook that you can chat with -- at their core, everything is plain text, meaning that you can remove chat messages of your own or ones that were AI-generated.</p> <p>It borrows from the idea of REPL / Jupyter notebook cells, where each cell contains enough metadata to be self-sufficient and atomic.</p>"},{"location":"#setting-up-for-synthesis","title":"Setting up for synthesis","text":"<p>Let's say you have a note in your vault called <code>[[ecology of technology]]</code>.  You treat this as an \"evergreen note\", which is to say that you often make references to it in other notes. It's an idea that you often think about, and you want to make reference to it even if only in scattered ways.</p> <p>Revisiting ideas like these becomes time consuming. Let's use Reason to make this easier. We'll query for notes that reference it and have the Reason agent synthesize the contents.</p> <pre><code>```reason\nsources:\n    - dql: |\n        LIST FROM \"Readwise/Books\"\n        WHERE contains(file.outlinks, [[ecology of technology]])\n      strategy: SingleEvergreenReferrer\n      evergreen: [[ecology of technology]]\nguidance: [[ecology of technology]] is an idea that has been spinning around in my head, connecting spirituality and futurism. Help me identify some common overarching ideas to summarize my thoughts on it.\n```\n</code></pre> <p>This code block is called an Aggregator, and we can place it anywhere, in any note. It uses YAML syntax. You'll notice that it has two parts: a <code>sources</code> section which has DQL (Dataview Query Language) and some metadata around it, and a guidance prompt.</p> <p>A valid Aggregator will render the contents of the Dataview query like so:</p> <p></p>"},{"location":"#a-little-about-sources","title":"A little about Sources","text":"<p>Some info about the anatomy of a Source:</p> <ul> <li>The Dataview query retrieves notes from your vault</li> <li>The strategy determines how content is extracted from the note (to improve relevance when notes are very long, contain lots of irrelevant information, etc.)</li> <li>An evergreen is required for the <code>SingleEvergreenReferrer</code> strategy. It tells Reason to extract only contents just before and after mentions of the evergreen.</li> </ul> <p>A Source can be even simpler:</p> <pre><code>```reason\nsources:\n    - dql: LIST FROM \"Readwise/Articles\"\nguidance: Some reflections from my article highlights\n```\n</code></pre> <p>This will extract using default behavior; that is, the entire contents of each note retrieved by Dataview. For more information about extraction strategies, see Extraction Strategies.</p> <p>We may also define several Sources for an Aggregator to use:</p> <pre><code>```reason\nsources:\n    - dql: |\n        LIST FROM \"Readwise/Books\"\n        WHERE contains(file.outlinks, [[ecology of technology]])\n      strategy: SingleEvergreenReferrer\n      evergreen: [[ecology of technology]]\n    - dql: |\n        LIST FROM \"Readwise/Articles\"\nguidance: [[ecology of technology]] is an idea that has been spinning around in my head, connecting spirituality and futurism. Help me identify some common overarching ideas to summarize my thoughts on it.\n```\n</code></pre>"},{"location":"#synthesis","title":"Synthesis","text":"<p>Great! Now that we have an Aggregator, we can create a Synthesis.</p> <p></p> <p>A finished Synthesis will automatically create a new Reason code block so you can continue the conversation. After seeing how well the agent understood the guidance, you might want to nudge the synthesis in a specific direction or give it some more context on the notes.</p> <p>Hitting \"Continue\" on this produces an updated Aggregator that accounts for the new guidance. Then, we'll synthesize by hitting \"Continue\" on the next Reason code block with empty contents.</p> <p>But remember, because everything is plain text, we can also delete the Synthesis block and start over by modifying the original Aggregator code block.</p>"},{"location":"#saving-as-a-template","title":"Saving as a template","text":"<p>Let's say we're happy about how the conversation went: the Reason agent produced a useful and insightful synthesis of our notes on <code>[[ecology of technology]]</code>. What happens when we keep accumulating more references of <code>[[ecology of technology]]</code>? We'll need to keep updating the synthesis with our latest notes. Thankfully, we don't have to start the conversation from scratch each time. We can compile this into a template to reuse in the future.</p> <p>Hitting \"Save\" tells the Reason agent to analyze the conversation and automatically craft (and name) Aggregators that best capture the conversation. It stores these as templates in a Canvas in the <code>reason</code> folder.</p> <p></p> <p>We can then load this template by using its Aggregator ID:</p> <pre><code>```reason\naggregator: ecology-technology-reflections\n```\n</code></pre>"},{"location":"#what-can-i-do-with-this","title":"What can I do with this?","text":"<p>You can use Reason templates in...</p> <ul> <li>Any template you're already using, like your Daily notes</li> <li>Evergreen notes, so you don't have to revisit all your latest notes on a topic in order to synthesize your ideas</li> </ul> <p>You can interleave templates and even new Aggregators in any note, to help you supercharge your thought process in context. If your note gets too long, you can always collapse the Synthesis block.</p> <p>If you don't have the Aggregator ID handy, you can also create a Reason code block with free text, and this will retrieve the most relevant Aggregator for you from among the templates in the Canvas.</p>"},{"location":"extraction-strategies/","title":"\u26cf\ufe0f Extraction Strategies","text":""},{"location":"extraction-strategies/#extraction-strategies","title":"Extraction Strategies","text":""},{"location":"extraction-strategies/#evergreen","title":"Evergreen","text":"<p>Evergreen notes are similar to tags in that they are more often referenced by other notes than written to themselves. These are ideas that may evolve over time. Examples may be notes in <code>/people</code> or <code>/garden</code>.</p> <p>In order to extract content related to these notes, REASON first expands to their backlinks (notes that reference the evergreen note), then extracts their content that surrounds the evergreen note reference.</p>"},{"location":"extraction-strategies/#trim-to-end","title":"Trim-to-end","text":"<p>Notes may be very long for various reasons. To reduce token consumption and preserve relevance, <code>trim-to-end</code> assumes that the end of a note was most recently edited, and it extracts the last few sections of the note. This is true of append-only notes, such as highlights files that are imported from Readwise.</p>"},{"location":"extraction-strategies/#whole-contents","title":"Whole-contents","text":"<p>For all other notes, REASON extracts their entire contents.</p>"},{"location":"sample-aggregators/","title":"\ud83d\udca1 Examples","text":"<p>Here I'll walk through a couple of example Aggregators that I use for my own vault, and I'll explain their design.</p>"},{"location":"sample-aggregators/#1-takeaways-from-talking-to-people-i-recently-met","title":"1. Takeaways from talking to people I recently met","text":"<p>Obsidian allows me to brain dump after I've caught up with a friend, met a few new people at an event, or had a spark while brainstorming with a colleague. Reason provides a lens on these notes, which is super useful to get more out of what I've written down.</p> <p>To start, let's build a Dataview query together. The final result is a pretty intricate query:</p> <pre><code>LIST WITHOUT ID\nnotesPerPerson.file.link\nFLATTEN (file.outlinks) as outlink\nWHERE contains(meta(outlink).path, \"people/\")\nGROUP BY outlink\nSORT min(rows.file.ctime) DESC\nLIMIT 20\nFLATTEN rows as notesPerPerson\nWHERE contains(notesPerPerson.file.path, \"inbox\")\nSORT notesPerPerson.file.ctime DESC\nLIMIT 20\n</code></pre> <p>So, let's break it down.</p>"},{"location":"sample-aggregators/#how-do-i-know-if-a-link-is-a-person","title":"How do I know if a link is a person?","text":"<pre><code>... yesterday I talked to [[Jean Deaux]] about ...\n</code></pre> <p>In my vault, a link for \"Jean Deaux\" is a person if I have a note called <code>Jean Deaux.md</code> in my <code>people</code> folder. For each new person mentioned in my notes, I create a new, empty note, and I move it to my <code>people</code> folder. This links the mention to a person entity, even if the mention is from a note in a different folder (like <code>inbox</code>).</p>"},{"location":"sample-aggregators/#identifying-notes-that-refer-to-people","title":"Identifying notes that refer to people","text":"<pre><code>FLATTEN (file.outlinks) as outlink\nWHERE contains(meta(outlink).path, \"people/\")\n</code></pre> <p>This part of the query is used to filter for notes that make reference to notes (people) in the <code>people</code> folder.</p>"},{"location":"sample-aggregators/#what-about-focusing-on-the-people-i-met-most-recently","title":"What about focusing on the people I met most recently?","text":"<p>People whom I've most recently met will have the latest date that they were first mentioned. This query finds the 20 newest people:</p> <pre><code>GROUP BY outlink\nSORT min(rows.file.ctime) DESC\nLIMIT 20\n</code></pre> <p>We could change this to focus on people who are most mentioned, or have the earliest mention.</p>"},{"location":"sample-aggregators/#filtering-to-unprocessed-notes","title":"Filtering to unprocessed notes","text":"<p>It's not always possible to revisit my unprocessed notes in a timely manner. These notes, which live in my <code>inbox</code> folder, are meant to be moved out once I process them. Let's say that I want to use Reason to help me more quickly revisit unprocessed notes that mention new people:</p> <pre><code>WHERE contains(notesPerPerson.file.path, \"inbox\")\nSORT notesPerPerson.file.ctime DESC\nLIMIT 20\n</code></pre>"},{"location":"sample-aggregators/#the-final-aggregator","title":"The final Aggregator","text":"<pre><code>```reason\nsources:\n    - dql: |\n        LIST WITHOUT ID\n        notesPerPerson.file.link\n        FLATTEN (file.outlinks) as outlink\n        WHERE contains(meta(outlink).path, \"people/\")\n        GROUP BY outlink\n        SORT min(rows.file.ctime) DESC\n        LIMIT 20\n        FLATTEN rows as notesPerPerson\n        WHERE contains(notesPerPerson.file.path, \"inbox\")\n        SORT notesPerPerson.file.ctime DESC\n        LIMIT 20\nguidance: |\n    I have these in my inbox that I've quickly captured from catching up with friends, collaborations with colleagues, and new people I've met from events. I want to make it easier for me to revisit them, so please collect common ideas and help me prioritize following up on urgent threads. Additionally, identify any longer range ideas.\n    Synthesize specific and recurring ideas that I took notes on, then structure it in sections for each idea with the following bullets: people names, insightful takeaways, potential next steps, and references to source material (avoid using the same ones twice)\n```\n</code></pre> <p>I've built this query for a couple simple habits: an <code>inbox</code> folder for unprocessed notes and a <code>people</code> folder to collect the people themselves. So, even if you don't do too much to organize your folders beforehand, Dataview can help you retrieve notes of interest.</p> <p>Let's continue with another Aggregator example: highlights from consumed content.</p>"},{"location":"sample-aggregators/#2-revisiting-what-ive-read-or-listened-to","title":"2. Revisiting what I've read or listened to","text":"<p>I used to have a hard time connecting dots between reads. Because of the tools at hand, it was tempting to see books and articles as more than just a to-do list. But sending them to \"archive\" felt like letting fertile ground collect dust.</p> <p>Obsidian has been helping me do better, part of a growing habit. I'll share what I have as a work-in-progress:</p> <ul> <li>Highlights from Kindle, Reader (a read-it-later app), and Snipd (highlights clipped from automatic podcast transcripts) all go to Readwise.</li> <li>Obsidian's Readwise plugin imports all highlights, each work having its own accumulated file. Each file is automatically broken down into sections by date imported and highlight block (inserting references to these is really easy).</li> <li>Podcasts, books, and articles each have their own folders.</li> </ul> <p>A Reason template that's setup to synthesize ideas across my recent content looks like this:</p> <pre><code>sources:\n    - dql: |\n        LIST FROM \"Readwise/Podcasts\"\n        SORT file.ctime DESC LIMIT 3\n    - dql: |\n        LIST FROM \"Readwise/Books\"\n        SORT file.ctime DESC LIMIT 2\n      strategy: LongContent\nguidance: |\n    These are my highlights from books and from podcasts, some of which contain my own notes. There is technical content as well as reflective content; usually, I want to keep them separate. Synthesize common introspective threads that resonated with me or technical implications that I found interesting, structuring your output into sections. Each section should have the following: a title, a description, and references.\n</code></pre> <p>You'll notice that I use a strategy called <code>LongContent</code> on the <code>Readwise/Books</code> folder. Because books accumulate many more highlights than other types of content (at least for a voracious highlighter like me), this strategy trims the extracted content to the last few sections. That is, Reason only reads the most recent portion as it synthesizes.</p> <p>Strategies can differ across sources: for a podcast, being shorter, I'd like to use all the highlights.</p>"},{"location":"sample-aggregators/#part-of-a-workflow-you-say","title":"Part of a workflow, you say?","text":"<p>As I've dogfooded (tested out) Reason over the last few months, it's been fun to tinker with and often jaw-dropping to see the insights it produces from my own notes. I get to abundantly capture what I find inspiring and use Reason to remix it all later.</p> <p>But Reason, like any component of an Obsidian workflow, works best when it's integrated into a regular habit. I've designed Reason templates to be inserted into any Obsidian note template. Once I've saved the example above as a Reason Aggregator template, my daily note template could look like this:</p> <pre><code>title: &lt;date&gt;.md\n\n```reason\naggregator: synthesize-highlights\n```\n\n## urgent tasks from /inbox\n```tasks\npath includes inbox\nnot done\npriority is high\n```\n</code></pre> <p>Now, revisiting my consumed content each day is as easy as synchronizing my Readwise and clicking a button from Reason.</p>"},{"location":"contributing/contributing/","title":"\ud83d\udea7 Contributing","text":"<p>coming soon!</p>"}]}