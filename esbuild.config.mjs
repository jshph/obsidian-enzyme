import builtins from 'builtin-modules'
import esbuild from 'esbuild'
import process from 'process'
import { fileURLToPath } from 'url'
import { sassPlugin } from 'esbuild-sass-plugin'
import fs from 'fs'
import path from 'path'

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

// Convert file URL to path for __dirname
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const prod = process.argv[2] === 'production'

function moveStylesPlugin() {
	return {
		name: 'move-styles',
		setup(build) {
			build.onEnd(async () => {
				const oldPath = 'styles/styles.css'
				const newPath = 'styles.css'
				if (fs.existsSync(oldPath)) {
					fs.renameSync(oldPath, newPath)
					fs.rmdirSync('styles')
				}
			})
		}
	}
}

const context = await esbuild.context({
	platform: 'node',
	banner: {
		js: banner
	},
	entryPoints: ['src/main.ts', 'src/styles/styles.scss'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins
	],
	format: 'cjs',
	target: 'es2020',
	logLevel: 'info',
	sourcemap: false,
	treeShaking: true,
	outdir: './',
	plugins: [sassPlugin(), moveStylesPlugin()]
})

if (prod) {
	await context.rebuild()
	process.exit(0)
} else {
	await context.watch()
}
